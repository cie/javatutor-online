# yaml-language-server: $schema=file:///home/cie/git/javatutor/tasks.schema.json

- id: HelloWorld
  title: Hello, $NAME!
  description: |
    Welcome and thanks for participating! 
    This is a warm-up task so you can get familiar with the environment.
    Whenever you are stuck, feel free to use the
    <img src="/hand.png" alt="hand" width=30 height=30 style="transform: rotate(15deg); opacity: 0.9; display: inline-block; vertical-align:middle">
    button to chat with the instructor.

    Write a program that asks for the name of the user and then greets them:

    <pre class="output">
    <code>Enter your name: <code class="user-input user-input-line">$NAME</code>
    Hello, $NAME!</code>
    </pre>

    The **Input** box below contains the user input that will be sent to your program when you press Run.
    One line in the box is one line entered.

    You can run the program with the
    <span class="bg-green-600 dark:text-white rounded px-2 py-1 text-sm" style="color: white; box-shadow: 1px 2px 6px -2px inset rgba(255, 255, 255, 0.6), -1px -2px 5px -2px inset rgba(0, 0, 0, 0.4), 1px 3px 5px -1px rgba(0, 0, 0, 0.2);">Run</span>
    button and see its output in the **Output** box.

  initialCode: |
    import java.util.Scanner;

    public class HelloWorld {
        public static void main(String [] args) {
            Scanner input = new Scanner(System.in);
            System.out.println("Enter your name: ");
            String name = input.nextLine();
        }
    }
  input: $NAME
  expectedOutput: |
    Enter your name: 
    Hello, $NAME!
  hints:
    - match: //block_content/*[.//name[.="nextLine"]][not(following-sibling::*[contains(., "print")])]
      message: Use another System.out.println() call.
      delay: 20
      first: true
      solution:
        after: String name = input.nextLine();
        add: System.out.println();
        next: 1
    - match: //name[.="print" or .="println"]/../../argument_list[not(*)]
      message: Add an argument. What do you want to output?
      delay: 15
      solution:
        turn: System.out.println();
        into: System.out.println("Hello");
        next: 1
    - match: .//name[.="nextLine"]/following::*//name[.="print" or .="println"]/../../argument_list[not(.//name[.='name'])]
      message: Include the user's name in the output.
      delay: 9
      solution:
        turn: System.out.println("Hello");
        into: System.out.println("Hello " + name);
        next: 1
    - match: .//name[.="nextLine"]/following::*//name[.="print" or .="println"]/../../argument_list/argument[expr/*[last()]="name"]
      message: You are missing the exclamation mark at the end.
      delay: 7
      solution:
        turn: System.out.println("Hello " + name);
        into: System.out.println("Hello " + name + "!");
        next: 1
    - match: .//name[.="nextLine"]/following::*//name[.="print" or .="println"]/../../argument_list/argument/expr/*[1][.='"Hello "']
      message: |
        Aren't you missing a comma? Think about "Let's eat, Grandma!" and "Let's eat Grandma!"

        <small>(credit: Kevlin Henney)</small>
      delay: 9
      solution:
        turn: System.out.println("Hello " + name + "!");
        into: System.out.println("Hello, " + name + "!");
        done: true

#--------------------------------------------------------------------------
- id: Lab12_E1
  title: Analyze scores
  description: |
    Write a program that reads an unspecified number of scores and
    determines how many scores are above or equal to the average and how many
    scores are below the average.

    The user has to enter a negative number to signify the end of the input.

    Assume that the maximum number of scores is 100.

    <pre class="output">
    <code>Enter scores: (enter a negative number to signify the end):
    <code class="user-input user-input-line">23 76 54 -1</code>
    Average of scores: 51
    Number of scores above or equal the average: 2
    Number of scores below average: 1</code>
    </pre>

  initialCode: |
    import java.util.Scanner;

    public class Lab12_E1 {
        public static void main(String[] args) {

        }
    }
  input: 23 76 54 -1
  hints:
    - match: //function[name='main']/block[not(//decl/type//name[.='Scanner'])]
      message: Start by making a Scanner variable to take inputs from the user
      solution:
        after: public static void main(String[] args) {
        add: Scanner in = new Scanner(System.in);
        next: +1
    - match: //function[name='main']//block_content[not(
        .//name[.='print' or .='println'])]/*[last()]
      message: Prompt the user to enter a collection of scores
      solution:
        after: Scanner in = new Scanner(System.in);
        add: |
          System.out.println("Enter scores: (enter a negative number to signify the end): ");
        next: +1
    - match: //function[name='main']//block_content[not(
        .//decl[type//index or name//index])]/*[last()]
      message: Create an array to store the scores in it.
      solution:
        after: |
          System.out.println("Enter scores: (enter a negative number to signify the end): ");
        add: String[] arr;
        next: +1
    - match: //function[name='main']/block
        //decl[type//index or name//index][type/name/name!='int']
      message: Make sure you use an `int` array
      solution:
        turn: String[] arr;
        into: int[] arr;
        next: +1
    - match: //function[name='main']/block
        //decl[type//index or name//index][not(init)]
      message: Initialize the array
      solution:
        turn: int[] arr;
        into: int[] arr = new int[10];
        next: +1
    - match: //function[name='main']/block
        //decl[type//index or name//index][normalize-space(init//index/expr) != '100']
      message: The size of the array should be 100
      solution:
        turn: int[] arr = new int[10];
        into: int[] arr = new int[100];
        next: +1
    - match:
        //function[name='main']/block//decl[type//index or name//index][normalize-space(init//index/expr) = '100']
        [not(following::*/descendant-or-self::decl)]
      solution:
        after: int[] arr = new int[100];
        add: String sth;
        next: +1
      message: Think what varaibles you need right now and to initialize them.
    - match:
        //function[name='main']/block//decl[type//index or name//index][normalize-space(init//index/expr) = '100']
        /following::*/descendant-or-self::decl[not(//name[.=''])]
      message: |
        Decare three `int` variables: `average` for

#--------------------------------------------------------------------------
- id: Lab12_E2
  title: Count single digits
  description: |
    Write a program that generates 100 random integers between  
    0 and 9 and displays the count for each number. 

    (Hint: Use an array of ten integers, say counts, to store the counts for the number of 0s, 1s, . . . , 9s.)
  initialCode: |
    public class Lab12_E2 {
        public static void main(String[] args) {

        }
    }
  input: ''
  hints:
    - match: //function[name='main']/block[not(.//decl[.//index])]
      message: Let's start with an array of `int`s
      solution:
        after: public static void main(String[] args) {
        add: int[] counts = new int[100];
        next: +1
    - match: //function[name='main']/block//decl/init//index[expr!='10']
      message: Make sure the size of the array is 10
      solution:
        turn: int[] counts = new int[100];
        into: int[] counts = new int[10];
        next: +1
    - match: //function[name='main']/block[not(.//for)]/block_content/*[last()]
      message: To store the 100 numbers in the array, we need a for loop.
      solution:
        after: int[] counts = new int[10];
        add: |
          for (int i = 1; i < 100; i++) {

          }
        next: +1
    - match: //function[name='main']//for[
        control/init/decl/init/expr=1
        and control/condition//operator='<'
        and control/condition//literal = 100]
      message: The `i` in the for loop has a max of 100 - ( i=0, i<100) or (i=1, i<=100)

#--------------------------------------------------------------------------
- id: Lab12_E3
  title: Assign grades
  description: |
    Write a program that reads student scores, gets the best score,
    and then assigns grades based on the following scheme:
        
    *  Grade is A if score is >= best - 10;
    *  Grade is B if score is >= best - 20;
    *  Grade is C if score is >= best - 30;
    *  Grade is D if score is >= best - 40;
    *  Grade is F otherwise.

    The program prompts the user to enter the total number of students, then prompts
    the user to enter all of the scores, and concludes by displaying the grades.
  initialCode: |
    public class Lab12_E2 {
        public static void main(String[] args) {

        }
    }
  input: ''
  hints: []
