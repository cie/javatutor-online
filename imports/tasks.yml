# yaml-language-server: $schema=file:///home/cie/git/javatutor/tasks.schema.json

- id: HelloWorld
  title: Hello, $NAME!
  description: |
    Welcome and thanks for participating! 
    This is a warm-up task so you can get familiar with the environment.
    Whenever you are stuck, feel free to use the
    <img src="/hand.png" alt="hand" width=30 height=30 style="transform: rotate(15deg); opacity: 0.9; display: inline-block; vertical-align:middle">
    button to chat with the instructor.

    Write a program that asks for the name of the user and then greets them:

    <pre class="output">
    <code>Enter your name: <code class="user-input user-input-line">$NAME</code>
    Hello, $NAME!</code>
    </pre>

    The **Input** box below contains the user input that will be sent to your program when you press Run.
    One line in the box is one line entered.

    You can run the program with the
    <span class="bg-green-600 dark:text-white rounded px-2 py-1 text-sm" style="color: white; box-shadow: 1px 2px 6px -2px inset rgba(255, 255, 255, 0.6), -1px -2px 5px -2px inset rgba(0, 0, 0, 0.4), 1px 3px 5px -1px rgba(0, 0, 0, 0.2);">Run</span>
    button and see its output in the **Output** box.

  initialCode: |
    import java.util.Scanner;

    public class HelloWorld {
        public static void main(String [] args) {
            Scanner input = new Scanner(System.in);
            System.out.println("Enter your name: ");
            String name = input.nextLine();
        }
    }
  input: $NAME
  hints:
    - match: //block_content/*[.//name[.="nextLine"]][not(following-sibling::*[contains(., "print")])]
      message: Use another System.out.println() call.
      delay: 20
    - match: //name[.="print" or .="println"]/../../argument_list[not(*)]
      message: Add an argument. What do you want to output?
      delay: 15
    - match: .//name[.="nextLine"]/following::*//name[.="print" or .="println"]/../../argument_list[not(.//operator)]
      message: Include the user's name in the output.
      delay: 9
    - match: .//name[.="nextLine"]/following::*//name[.="print" or .="println"]/../../argument_list/argument[expr/*[last()]="name"]
      message: You are missing the exclamation mark at the end.
      delay: 7
    - match: .//name[.="nextLine"]/following::*//name[.="print" or .="println"]/../../argument_list/argument/expr/*[1][.='"Hello "']
      message: |
        Aren't you missing a comma? Think about "Let's eat, Grandma!" and "Let's eat Grandma!" <small>(credit: Kevlin Henney)</small>
      delay: 9
  tests:
    nothing entered yet:
      code: |
        import java.util.Scanner;

        public class Code {
            public static void main(String [] args) {
                Scanner input = new Scanner(System.in);
                System.out.println("Enter your name: ");
                String name = input.nextLine();
                
            }
        }
      hints:
        - message: Use another System.out.println() call.
    no arg for print():
      code: |
        import java.util.Scanner;

        public class Code {
            public static void main(String [] args) {
                Scanner input = new Scanner(System.in);
                System.out.println("Enter your name: ");
                String name = input.nextLine();
                System.out.println();
            }
        }
      hints:
        - message: Add an argument. What do you want to output?
- id: Patterns1
  title: Display patterns using loops (1/3)
  description: |
    Use nested loops to display Pattern B. Use the provided code for Pattern A.

    <pre class="output">
    Pattern A
    1 
    1 2 
    1 2 3 
    1 2 3 4 
    1 2 3 4 5 
    1 2 3 4 5 6 

    Pattern B
    1 2 3 4 5 6 
    1 2 3 4 5 
    1 2 3 4 
    1 2 3 
    1 2 
    1 
    </pre>
  initialCode: |
    public class Patterns1 {
        public static void main(String[] args) {
            System.out.println("Pattern A");
            for (int i = 1; i <= 6; i++) {
                for (int j = 1; j <= i ; j++) {
                    System.out.print(j + " ");
                }
                System.out.println();
            }

            System.out.println();
            System.out.println("Pattern B");

        }
    }

  input: ''
  hints:
    - match: //literal[contains(., "Pattern A")]/following::for[following::*//literal[contains(., "Pattern B")][not(following::for)]]
      message: |
        Check out the code for pattern A and try to understand how we used nested loops.
        * In the outer loop, we make a new line each iteration.
        * In the inner loop, we print the row of numbers.

      # hints for mistakes
    - match: //for/control[init//literal <= condition//operator[.="<="]/following-sibling::literal and incr//operator[.="--"]]
      message: This might be an infinite loop
    - match: //literal[contains(., "Pattern B")]/following::for[1]//for//name[.="println"]
      message: Don't use `println` in the inner loop, that would output a newline.

    # hints for the solution
    - match: //literal[contains(., "Pattern B")]/following::for[1][not(.//for)]
      message: Create two nested for loops just as in Pattern A.
    - match: //literal[contains(., "Pattern B")]/following::for[1]//for[not(control/following-sibling::*//name[.="j"])]
      message: Output the number in the inner loop.
    - match: //literal[contains(., "Pattern B")]/following::for[1][not(.//name[.="println"])]
      message: Output a newline in the outer loop in each iteration.
    - match: //literal[contains(., "Pattern B")]/following::for[1]/control/init//expr[.="1"]
      message: In the outer loop, `i` should start from 6 and end at 1.
    - match: //literal[contains(., "Pattern B")]/following::for[1]/control/condition//literal[.="6"]
      message: In the outer loop, `i` should start from 6 and end at 1.
    - match: //literal[contains(., "Pattern B")]/following::for[1]/control/incr//operator[.="++"]
      message: In the outer loop, `i` should be decremented.
    - match: //literal[contains(., "Pattern B")]/following::for[1]/control/condition//operator[.="<="][following::literal="1"]
      message: '`i` will not be `<= 1` even at the beginning.'

- id: Patterns2
  title: Display patterns using loops (2/3)
  description: |
    This is another variation of Pattern A.

    <pre class="output">
    Pattern A
    1 
    1 2 
    1 2 3 
    1 2 3 4 
    1 2 3 4 5 
    1 2 3 4 5 6 

    Pattern C
              1 
            2 1 
          3 2 1 
        4 3 2 1 
      5 4 3 2 1 
    6 5 4 3 2 1 
    </pre>
  initialCode: |
    public class Patterns2 {
        public static void main(String[] args) {
            System.out.println("Pattern A");
            for (int i = 1; i <= 6; i++) {
                for (int j = 1; j <= i ; j++) {
                    System.out.print(j + " ");
                }
                System.out.println();
            }

            System.out.println();
            System.out.println("Pattern C");

        }
    }

  input: ''
  hints:
    # hints for mistakes
    - match: //for/control[init//literal <= condition//operator[.="<="]/following-sibling::literal and incr//operator[.="--"]]
      message: This might be an infinite loop
    - match: //for/control[init//expr[.='i'] and //operator[.="<="]/following-sibling::literal='1' and incr//operator[.="--"]]
      message: This will be an infinite loop when `i` is 1. Check the relational operator.
    - match: //literal[contains(., "Pattern C")]/following::for[1]//for//name[.="println"]
      message: Don't use `println` in the inner loop, that would output a newline.

    # hints for the solution
    - match: //literal[contains(., "Pattern C")]/following::for[1][not(.//for)]
      message: Create two nested for loops just as in Pattern A.
    - match: //literal[contains(., "Pattern C")]/following::for[1][not(.//name[.="println"])]
      message: Output a newline in the outer loop in each iteration.
    - match: |
        //literal[contains(., "Pattern C")]/following::for[count(.//for)!=2]
      message: 'We need two inner loops: one to print empty spaces, and the second to print the numbers.'
    - match: |
        //literal[contains(., "Pattern C")]/following::for[1]/control[
          not(
            init//literal =1
            and condition//operator[.="<="]/following-sibling::*[.="6" or self::name]
            and incr//operator="++")]
      message: In the outer loop, `i` should start from 1 and end at the number of lines in the pattern.
    - match: |
        //literal[contains(., "Pattern C")]/following::for[1]//for[./*[2]//name[.='j']]/control[
          not(
            init//name[2] ="i"
            and condition//operator[.=">="]/following-sibling::*[.="1"]
            and incr//operator="--")]
      message: When outputting the numbers, `j` should start from `i` and decrease down to 1.
    - match: |
        //literal[contains(., "Pattern C")]/following::for[1]//for[./*[2]//name[.='k']]/control[
          not(
            init//name[2] ="i"
            and condition//operator[.=">="]/following-sibling::*[.="1"]
            and incr//operator="--")]
      message: When outputting the numbers, `k` should start from `i` and decrease down to 1.
  tests:
    initial:
      code: |
        public class Patterns2 {
            public static void main(String[] args) {
                System.out.println("Pattern A");
                for (int i = 1; i <= 6; i++) {
                    for (int j = 1; j <= i ; j++) {
                        System.out.print(j + " ");
                    }
                    System.out.println();
                }

                System.out.println();
                System.out.println("Pattern C");

            }
        }
      hints:
        - message: Use another System.out.println() call.

- id: Patterns3
  title: Display patterns using loops (3/3)
  description: |
    And finally the third variation.

    <pre class="output">
    Pattern A
    1 
    1 2 
    1 2 3 
    1 2 3 4 
    1 2 3 4 5 
    1 2 3 4 5 6 

    Pattern D
    1 2 3 4 5 6 
      1 2 3 4 5 
        1 2 3 4 
          1 2 3 
            1 2 
              1  
    </pre>
  initialCode: |
    public class Patterns3 {
        public static void main(String[] args) {
            System.out.println("Pattern A");
            for (int i = 1; i <= 6; i++) {
                for (int j = 1; j <= i ; j++) {
                    System.out.print(j + " ");
                }
                System.out.println();
            }

            System.out.println();
            System.out.println("Pattern D");
        }
    }

  input: ''
  hints:
    # hints for mistakes
    - match: //for/control[init//literal <= condition//operator[.="<="]/following-sibling::literal and incr//operator[.="--"]]
      message: This might be an infinite loop
    - match: //literal[contains(., "Pattern C")]/following::for[1]//for//name[.="println"]
      message: Don't use `println` in the inner loop, that would output a newline.

    # hints for the solution
    - match: //literal[contains(., "Pattern D")]/following::for[1][not(.//for)]
      message: Create two nested for loops just as in Pattern A.
    - match: //literal[contains(., "Pattern D")]/following::for[1][not(.//name[.="println"])]
      message: Output a newline in the outer loop in each iteration.
    - match: //literal[contains(., "Pattern D")]/following::for[1]/control/init//expr[.="1"]
      message: In the outer loop, `i` should start from the number of lines and end at 1.
    - match: //literal[contains(., "Pattern D")]/following::for[1]/control/condition//literal[.="6"]
      message: In the outer loop, `i` should start from the number of lines and end at 1.
    - match: //literal[contains(., "Pattern D")]/following::for[1]/control/incr//operator[.="++"]
      message: In the outer loop, `i` should be decremented.
    - match: //literal[contains(., "Pattern D")]/following::for[1]/control/condition//operator[.="<="][following::literal="1"]
      message: '`i` will not be `<= 1` even at the beginning.'
    - match: |
        //literal[contains(., "Pattern D")]/following::for[count(.//for)!=2]
      message: 'We need two inner loops: one to print empty spaces, and the second to print the numbers.'
